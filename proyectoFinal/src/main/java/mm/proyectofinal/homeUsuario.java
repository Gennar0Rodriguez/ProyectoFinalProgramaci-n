/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mm.proyectofinal;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;

/**
 *
 * @author Estudiante
 */
public class homeUsuario extends javax.swing.JFrame {

    DefaultTableModel tablaEncuentros = new DefaultTableModel();
    private String login;

    /**
     * Creates new form homeUsuario
     */
    public homeUsuario() {
        initComponents();
        Thread reloj;
        actualizarPuntos();
        actualizarRanking();
        reloj = new Thread(() -> {
            while (true) {
                java.util.Date ahora = new java.util.Date();
                java.text.SimpleDateFormat formatoHora = new java.text.SimpleDateFormat("hh:mm:ss a");
                java.text.SimpleDateFormat formatoFecha = new java.text.SimpleDateFormat("dd/MM/yyyy");

                jLabelHora.setText("Hora: " + formatoHora.format(ahora));
                jLabelFecha.setText("Fecha: " + formatoFecha.format(ahora));

                try {
                    Thread.sleep(1000); // Espera 1 segundo
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        reloj.start();
    }

    public homeUsuario(String nick) {
        initComponents();
        this.login = nick;
        jLabel2.setText("Bienvenido, " + nick);
        actualizarPuntos();
        actualizarRanking();
        Thread reloj;
        reloj = new Thread(() -> {
            while (true) {
                java.util.Date ahora = new java.util.Date();
                java.text.SimpleDateFormat formatoHora = new java.text.SimpleDateFormat("hh:mm:ss a");
                java.text.SimpleDateFormat formatoFecha = new java.text.SimpleDateFormat("dd/MM/yyyy");

                jLabelHora.setText("Hora: " + formatoHora.format(ahora));
                jLabelFecha.setText("Fecha: " + formatoFecha.format(ahora));

                try {
                    Thread.sleep(1000); // Espera 1 segundo
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        reloj.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabelRanking = new javax.swing.JLabel();
        comboEstado = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnBuscar = new javax.swing.JButton();
        jLabelHora = new javax.swing.JLabel();
        jLabelFecha = new javax.swing.JLabel();
        btnPrediccion = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1210, 693));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("¡Yo para mi! ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 0, -1, 50));

        jLabelRanking.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelRanking.setText("RANKING");
        getContentPane().add(jLabelRanking, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 0, -1, -1));

        comboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jugando", "Finalizado", "Aún no comenzado" }));
        comboEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboEstadoActionPerformed(evt);
            }
        });
        getContentPane().add(comboEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        jTable1.setModel(tablaEncuentros);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 930, -1));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 80, 20));

        jLabelHora.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelHora.setText("HORA");
        getContentPane().add(jLabelHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 80, 310, 80));

        jLabelFecha.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelFecha.setText("DIA");
        getContentPane().add(jLabelFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 260, 80));

        btnPrediccion.setText("Hacer una predicción");
        btnPrediccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrediccionActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrediccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 220, 160, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setText("Bienvenido Usuario...");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboEstadoActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        actualizar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnPrediccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrediccionActionPerformed
        // TODO add your handling code here:
        // Obtener el índice de la fila seleccionada
        int indice = jTable1.getSelectedRow();
        if (indice == -1) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar un partido a predecir!");
            return;
        }

        // Verificar el estado del partido
        String estado = jTable1.getValueAt(indice, 4).toString();
        if (estado.equalsIgnoreCase("jugando") || estado.equalsIgnoreCase("finalizado")) {
            JOptionPane.showMessageDialog(null, "No se puede predecir este partido. Está inhabilitado.");
            return;
        }

        // Pedir predicciones al usuario
        String apuestaLocalStr = JOptionPane.showInputDialog(null, "Predicción para el local: ");
        String apuestaVisitanteStr = JOptionPane.showInputDialog(null, "Predicción para el visitante: ");

        if (apuestaLocalStr == null || apuestaVisitanteStr == null
                || apuestaLocalStr.isEmpty() || apuestaVisitanteStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes ingresar ambas predicciones.");
            return;
        }

        try {
            int apuestaLocal = Integer.parseInt(apuestaLocalStr);
            int apuestaVisitante = Integer.parseInt(apuestaVisitanteStr);

            String login = this.login;

            // Obtener idEncuentro de la fila seleccionada
            int idEncuentro = Integer.parseInt(jTable1.getValueAt(indice, 0).toString());

            // Conexión a la base de datos
            String url = "jdbc:mysql://localhost:3306/proyecto";
            String usuario = "root";
            String contra = "";

            try (Connection conexion = DriverManager.getConnection(url, usuario, contra)) {
                // Verificar si el usuario ya hizo predicción para este partido
                String checkSQL = "SELECT * FROM pronostica WHERE login = ? AND idEncuentro = ?";
                PreparedStatement psCheck = conexion.prepareStatement(checkSQL);
                psCheck.setString(1, login);
                psCheck.setInt(2, idEncuentro);
                ResultSet rsCheck = psCheck.executeQuery();

                if (rsCheck.next()) {
                    JOptionPane.showMessageDialog(null, "Ya hiciste una predicción para este partido.");
                    return;
                }

                // Insertar la predicción
                String sql = "INSERT INTO pronostica (login, idEncuentro, resultadoLocal, resultadoVisita) "
                        + "VALUES (?, ?, ?, ?)";
                PreparedStatement ps = conexion.prepareStatement(sql);
                ps.setString(1, login);
                ps.setInt(2, idEncuentro);
                ps.setInt(3, apuestaLocal);
                ps.setInt(4, apuestaVisitante);

                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Predicción registrada con éxito!");

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al guardar predicción: " + ex.getMessage());
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Debes ingresar números válidos para las predicciones.");
        }
    }//GEN-LAST:event_btnPrediccionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(homeUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(homeUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(homeUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(homeUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new homeUsuario().setVisible(true);
            }
        });
    }

    public void actualizar() {
        String url = "jdbc:mysql://localhost:3306/proyecto";
        String usuario = "root";
        String contra = "";

        tablaEncuentros.setColumnCount(0);
        tablaEncuentros.setRowCount(0);

        try (Connection conexion = DriverManager.getConnection(url, usuario, contra)) {

            PreparedStatement sentencia = conexion.prepareStatement(
                    "SELECT e.idEncuentro, e.fecha, e.horaInicio, e.horaFin, "
                    + "e.resultadoLocal, e.resultadoVisita, "
                    + "l.nombre AS local, v.nombre AS visitante "
                    + "FROM encuentro e "
                    + "JOIN equipo l ON e.idLocal = l.idEquipo "
                    + "JOIN equipo v ON e.idVisita = v.idEquipo"
            );

            ResultSet resultado = sentencia.executeQuery();

            tablaEncuentros.addColumn("ID Encuentro");
            tablaEncuentros.addColumn("Fecha");
            tablaEncuentros.addColumn("Hora Inicio");
            tablaEncuentros.addColumn("Hora Fin");
            tablaEncuentros.addColumn("Estado");
            tablaEncuentros.addColumn("Local");
            tablaEncuentros.addColumn("Visitante");
            tablaEncuentros.addColumn("Resultado Local");
            tablaEncuentros.addColumn("Resultado Visita");

            String opcionCombo = comboEstado.getSelectedItem().toString();
            String estadoCombo = "";
            switch (opcionCombo) {
                case "Jugando":
                    estadoCombo = "jugando";
                    break;
                case "Finalizado":
                    estadoCombo = "finalizado";
                    break;
                case "Aún no comenzado":
                    estadoCombo = "habilitado";
                    break;
            }

            SimpleDateFormat formatoFechaHora = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            java.util.Date ahora = new java.util.Date();

            while (resultado.next()) {
                String idEncuentro = resultado.getString("idEncuentro");
                String fecha = resultado.getString("fecha");
                String horaInicio = resultado.getString("horaInicio");
                String horaFin = resultado.getString("horaFin");

                try {
                    java.util.Date inicio = formatoFechaHora.parse(fecha + " " + horaInicio);
                    java.util.Date fin = formatoFechaHora.parse(fecha + " " + horaFin);

                    String estadoActual;
                    if (ahora.before(inicio)) {
                        estadoActual = "habilitado";
                    } else if (ahora.after(fin)) {
                        estadoActual = "finalizado";
                    } else {
                        estadoActual = "jugando";
                    }

                    if (!estadoActual.equals(estadoCombo)) {
                        continue;
                    }

                    String[] fila = new String[9];
                    fila[0] = idEncuentro;
                    fila[1] = fecha;
                    fila[2] = horaInicio;
                    fila[3] = horaFin;
                    fila[4] = estadoActual;
                    fila[5] = resultado.getString("local");
                    fila[6] = resultado.getString("visitante");
                    fila[7] = resultado.getString("resultadoLocal");
                    fila[8] = resultado.getString("resultadoVisita");
                    tablaEncuentros.addRow(fila);

                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
    }

    public void actualizarRanking() {
        String url = "jdbc:mysql://localhost:3306/proyecto";
        String usuario = "root";
        String contra = "";

        try (Connection conexion = DriverManager.getConnection(url, usuario, contra)) {
            PreparedStatement sentencia = conexion.prepareStatement("SELECT login, puntos FROM usuario ORDER BY puntos DESC LIMIT 5");

            ResultSet rs = sentencia.executeQuery();

            StringBuilder ranking = new StringBuilder("<html>");
            int posicion = 1;
            while (rs.next()) {
                String login = rs.getString("login");
                int puntos = rs.getInt("puntos");
                ranking.append(posicion).append(". ").append(login)
                        .append(" - ").append(puntos).append(" pts<br>");
                posicion++;
            }
            ranking.append("</html>");

            jLabelRanking.setText(ranking.toString());

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al cargar ranking: " + ex.getMessage());
        }
    }

    public void actualizarPuntos() {
        String url = "jdbc:mysql://localhost:3306/proyecto";
        String usuario = "root";
        String contra = "";

        try (Connection conexion = DriverManager.getConnection(url, usuario, contra)) {

            // Obtener todas las predicciones de partidos finalizados
            String sql = "SELECT p.login, p.idEncuentro, p.resultadoLocal AS predLocal, p.resultadoVisita AS predVisita, "
                    + "e.resultadoLocal AS realLocal, e.resultadoVisita AS realVisita "
                    + "FROM pronostica p "
                    + "JOIN encuentro e ON p.idEncuentro = e.idEncuentro "
                    + "WHERE e.fecha <= CURDATE()";  // partidos que ya terminaron
            PreparedStatement ps = conexion.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String login = rs.getString("login");
                int predLocal = rs.getInt("predLocal");
                int predVisita = rs.getInt("predVisita");
                int realLocal = rs.getInt("realLocal");
                int realVisita = rs.getInt("realVisita");

                int puntos = 0;

                if (predLocal == realLocal && predVisita == realVisita) {
                    puntos = 3; // acierto exacto
                } else if ((predLocal - predVisita) == (realLocal - realVisita)
                        || (predLocal > predVisita && realLocal > realVisita)
                        || (predLocal < predVisita && realLocal < realVisita)
                        || (predLocal == predVisita && realLocal == realVisita)) {
                    puntos = 1; // acierto ganador o empate
                }

                // Actualizar puntos del usuario
                String update = "UPDATE usuario SET puntos = puntos + ? WHERE login = ?";
                PreparedStatement psUpdate = conexion.prepareStatement(update);
                psUpdate.setInt(1, puntos);
                psUpdate.setString(2, login);
                psUpdate.executeUpdate();
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error al actualizar puntos: " + ex.getMessage());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnPrediccion;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelRanking;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
